import os
import requests
import json
import time
import subprocess
import asyncio
import aiohttp
import threading
import psutil
import uuid
import hashlib
from colorama import init, Fore, Style

init()

SERVER_LINKS_FILE = "Private_Link.txt"
ACCOUNTS_FILE = "Account.txt"
CONFIG_FILE = "Config.json"
webhook_url = None
device_name = None
interval = None
stop_webhook_thread = False
webhook_thread = None
FLASK_SERVER_URL = ''
bypass_status = "Ch∆∞a s·ª≠ d·ª•ng"

def print_header():
    os.system('cls' if os.name == 'nt' else 'clear')
    header = (
        "--------------------------------------------------------------\n"
        "|                                                            |\n"
        "|              üíò  Tool rejoin Mizuhara                      |\n"
        "|                  Server Infinite Group                     |\n"
        "|                   discord.gg/baokhanh                      |\n"
        "|                       Tool Rejoin                          |\n"
        "|                           ‚öô                                |\n"
        "|                                                            |\n"
        "--------------------------------------------------------------\n"
    )
    print(header + Style.RESET_ALL)

def print_status_table():
    os.system('cls' if os.name == 'nt' else 'clear')
    print(
        "------------------- B·∫£ng Tr·∫°ng Th√°i -------------------\n"
        "| Roblox Game Rejoin          |  ƒêang ho·∫°t ƒë·ªông         |\n"
        "------------------------------------------------------"
    )
    if previous_status is None:
        previous_status = {}
        if status == 2:
            status_text = "ONLINE"
        else:
            status_text = "Offline"
        if previous_status.get(user_id) != status_text:
            print(f"| {package_name} | {username} | {status_text} |")
            previous_status[user_id] = status_text
    print("------------------------------------------------------")
    return previous_status

def get_device_hwid():
    hwid = str(uuid.uuid1())
    hwid_hash = hashlib.sha256(hwid.encode()).hexdigest()
    return hwid_hash

def notify_flask_server(hwid):
    data = {"hwid": hwid}
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(FLASK_SERVER_URL, json=data, headers=headers)
    except Exception as e:
        pass

def get_roblox_packages():
    packages = []
    result = subprocess.run("pm list packages | grep 'roblox'", shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        packages = [line.split(":")[1] for line in result.stdout.splitlines()]
    return packages

def capture_screenshot():
    screenshot_path = "/data/data/com.termux/files/home/screenshot.png"
    os.system(f"screencap -p {screenshot_path}")
    return screenshot_path

def get_system_info():
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    uptime = time.time() - psutil.boot_time()
    system_info = {
        "cpu_usage": cpu_usage,
        "memory_total": memory_info.total,
        "memory_available": memory_info.available,
        "memory_used": memory_info.used,
        "uptime": uptime
    }
    return system_info

def load_config():
    global webhook_url, device_name, interval
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            config = json.load(file)
            webhook_url = config.get("webhook_url")
            device_name = config.get("device_name")
            interval = config.get("interval")
    else:
        webhook_url = None
        device_name = None
        interval = None

def save_config():
    config = {
        "webhook_url": webhook_url,
        "device_name": device_name,
        "interval": interval
    }
    with open(CONFIG_FILE, "w") as file:
        json.dump(config, file)

def start_webhook_thread():
    global webhook_thread, stop_webhook_thread
    if webhook_thread is None or not webhook_thread.is_alive():
        stop_webhook_thread = False
        webhook_thread = threading.Thread(target=send_webhook)
        webhook_thread.start()

def send_webhook():
    global stop_webhook_thread
    while not stop_webhook_thread:
        screenshot_path = capture_screenshot()
        system_info = get_system_info()
        embed = {
            "title": f"Th√¥ng tin h·ªá th·ªëng c·ªßa {device_name}",
            "color": 15258703,
            "fields": [
                {"name": "T√™n thi·∫øt b·ªã", "value": device_name, "inline": True},
                {"name": "S·ª≠ d·ª•ng CPU", "value": f"{system_info['cpu_usage']}%", "inline": True},
                {"name": "B·ªô nh·ªõ ƒë√£ d√πng", "value": f"{system_info['memory_used'] / system_info['memory_total'] * 100:.2f}%", "inline": True},
                {"name": "B·ªô nh·ªõ tr·ªëng", "value": f"{system_info['memory_available'] / system_info['memory_total'] * 100:.2f}%", "inline": True},
                {"name": "T·ªïng dung l∆∞·ª£ng b·ªô nh·ªõ", "value": f"{system_info['memory_total'] / (1024 ** 3):.2f} GB", "inline": True},
                {"name": "Th·ªùi gian ho·∫°t ƒë·ªông", "value": f"{system_info['uptime'] / 3600:.2f} gi·ªù", "inline": True}
            ],
            "image": {"url": "attachment://screenshot.png"}
        }
        payload = {
            "embeds": [embed],
            "username": device_name
        }
        with open(screenshot_path, "rb") as file:
            response = requests.post(
                webhook_url,
                data={"payload_json": json.dumps(payload)},
                files={"file": ("screenshot.png", file)}
            )
        if response.status_code == 204 or response.status_code == 200:
            print(Fore.GREEN + "Th√¥ng tin thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn webhook th√†nh c√¥ng." + Style.RESET_ALL)
        else:
            print(Fore.RED + f"L·ªói g·ª≠i th√¥ng tin thi·∫øt b·ªã ƒë·∫øn webhook, m√£ tr·∫°ng th√°i: {response.status_code}" + Style.RESET_ALL)
        time.sleep(interval * 60)

def stop_webhook():
    global stop_webhook_thread
    stop_webhook_thread = True

def setup_webhook():
    global webhook_url, device_name, interval, stop_webhook_thread
    stop_webhook_thread = True
    webhook_url = input(Fore.MAGENTA + "Vui l√≤ng nh·∫≠p URL Webhook c·ªßa b·∫°n: " + Style.RESET_ALL)
    device_name = input(Fore.MAGENTA + "Vui l√≤ng nh·∫≠p t√™n thi·∫øt b·ªã c·ªßa b·∫°n: " + Style.RESET_ALL)
    interval = int(input(Fore.MAGENTA + "Vui l√≤ng nh·∫≠p kho·∫£ng th·ªùi gian ƒë·ªÉ g·ª≠i th√¥ng tin thi·∫øt b·ªã ƒë·∫øn Webhook (t√≠nh b·∫±ng ph√∫t): " + Style.RESET_ALL))
    save_config()
    stop_webhook_thread = False
    threading.Thread(target=send_webhook).start()

def kill_roblox_processes():
    print(Fore.YELLOW + "ƒêang t·∫Øt t·∫•t c·∫£ c√°c tr√≤ ch∆°i Roblox tr√™n thi·∫øt b·ªã c·ªßa b·∫°n..." + Style.RESET_ALL)
    package_names = get_roblox_packages()
    for package_name in package_names:
        print(Fore.YELLOW + f"ƒêang t·∫Øt tr√≤ ch∆°i Roblox: {package_name}" + Style.RESET_ALL)
        os.system(f"pkill -f {package_name}")
    time.sleep(2)

def kill_roblox_process(package_name):
    print(Fore.GREEN + f"Tr√≤ ch∆°i Roblox {package_name} ƒë√£ b·ªã t·∫Øt." + Style.RESET_ALL)
    os.system(f"pkill -f {package_name}")
    time.sleep(2)

def launch_roblox(package_name, server_link, num_packages):
    try:
        subprocess.run(['am', 'start', '-n', f'{package_name}/com.roblox.client.startup.ActivitySplash', '-d', server_link], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(Fore.GREEN + f"ƒêang m·ªü Roblox cho {package_name}..." + Style.RESET_ALL)

        time.sleep(10)

        subprocess.run(['am', 'start', '-n', f'{package_name}/com.roblox.client.ActivityProtocolLaunch', '-d', server_link], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(Fore.GREEN + f"ƒê√£ v√†o Roblox cho {package_name} v·ªõi li√™n k·∫øt server: {server_link}." + Style.RESET_ALL)

        time.sleep(10)

        os.system('cls' if os.name == 'nt' else 'clear')  # X√≥a m√†n h√¨nh v√† hi·ªÉn th·ªã b·∫£ng tr·∫°ng th√°i sau khi Roblox ƒë√£ kh·ªüi ƒë·ªông
        print_status_table(bypass_status, accounts)

    except Exception as e:
        print(Fore.RED + f"L·ªói khi m·ªü Roblox cho {package_name}: {e}" + Style.RESET_ALL)

def format_server_link(input_link):
    if 'roblox.com' in input_link:
        return input_link
    elif input_link.isdigit():
        return f'roblox://placeID={input_link}'
    else:
        print(Fore.RED + "Li√™n k·∫øt kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ID tr√≤ ch∆°i ho·∫∑c li√™n k·∫øt server ri√™ng t∆∞ h·ª£p l·ªá." + Style.RESET_ALL)
        return None

def save_server_links(server_links):
    with open(SERVER_LINKS_FILE, "w") as file:
        for package, link in server_links:
            file.write(f"{package},{link}\n")

def load_server_links():
    server_links = []
    if os.path.exists(SERVER_LINKS_FILE):
        with open(SERVER_LINKS_FILE, "r") as file:
            for line in file:
                package, link = line.strip().split(",", 1)
                server_links.append((package, link))
    return server_links

def save_accounts(accounts):
    with open(ACCOUNTS_FILE, "w") as file:
        for package, user_id in accounts:
            file.write(f"{package},{user_id}\n")

def load_accounts():
    accounts = []
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, "r") as file:
            for line in file:
                package, user_id = line.strip().split(",", 1)
                accounts.append((package, user_id))
    return accounts

def find_userid_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read()
            userid_start = content.find('"UserId":"')
            if userid_start == -1:
                print(Fore.RED + "Kh√¥ng t√¨m th·∫•y User ID." + Style.RESET_ALL)
                return None
            userid_start += len('"UserId":"')
            userid_end = content.find('"', userid_start)
            if userid_end == -1:
                print("Kh√¥ng t√¨m th·∫•y k·∫øt th√∫c c·ªßa User ID.")
                return None
            userid = content[userid_start:userid_end]
            return userid
    except IOError as e:
        print(Fore.RED + f"L·ªói khi ƒë·ªçc file: {e}" + Style.RESET_ALL)
        return None

async def get_user_id(username):
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {
        "usernames": [username],
        "excludeBannedUsers": True
    }
    headers = {"Content-Type": "application/json"}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            data = await response.json()
            if 'data' in data and len(data['data']) > 0:
                return data['data'][0]['id']
    return None

def get_username(user_id):
    try:
        url = f"https://users.roblox.com/v1/users/{user_id}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data.get("name", "Kh√¥ng r√µ")
    except Exception as e:
        print(Fore.RED + f"L·ªói l·∫•y t√™n ng∆∞·ªùi d√πng cho User ID {user_id}: {e}" + Style.RESET_ALL)
        return None

def check_user_online(user_id):
    try:
        url = "https://presence.roblox.com/v1/presence/users"
        headers = {'Content-Type': 'application/json'}
        body = json.dumps({"userIds": [user_id]})
        response = requests.post(url, headers=headers, data=body)
        response.raise_for_status()
        data = response.json()
        presence_type = data["userPresences"][0]["userPresenceType"]
        return presence_type
    except Exception as e:
        print(Fore.RED + f"L·ªói ki·ªÉm tra tr·∫°ng th√°i online, m√£ tr·∫°ng th√°i: {e}" + Style.RESET_ALL)
        return None

def create_bypass_link(hwid_link, api_key="toolkey"):
    return f"http://103.65.235.193:8264/api/fluxus?hwid_link={hwid_link}&api_key={api_key}"

def bypass_fluxus(accounts):
    bypassed_results = []
    global bypass_status
    bypass_status = "ƒêang s·ª≠ d·ª•ng"
    for package_name, user_id in accounts:
        fluxus_hwid_path = f"/data/data/{package_name}/app_assets/content/"
        files = os.listdir(fluxus_hwid_path)
        hwid_file = files[0] if files else None
        if hwid_file:
            with open(os.path.join(fluxus_hwid_path, hwid_file), 'r') as file:
                hwid = file.read().strip()
            hwid_link = f"https://flux.li/android/external/start.php?HWID={hwid}"
            bypass_link = create_bypass_link(hwid_link)
            username = get_username(user_id) or user_id
            try:
                response = requests.get(bypass_link)
                if response.status_code == 200:
                    bypassed_results.append((package_name, response.json()))
                    print(Fore.GREEN + f"{username}: Fluxus bypass th√†nh c√¥ng - {response.json()}" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"{username}: Fluxus bypass th·∫•t b·∫°i, m√£ tr·∫°ng th√°i: {response.status_code}" + Style.RESET_ALL)
            except Exception as e:
                print(Fore.RED + f"{username}: L·ªói Fluxus bypass: {str(e)}" + Style.RESET_ALL)
    return bypassed_results

def main():
    print_header()
    device_hwid = get_device_hwid()
    notify_flask_server(device_hwid)
    load_config()
    previous_status = {}
    while True:
        setup_type = input(Fore.CYAN + "Vui l√≤ng ch·ªçn ch·ª©c nƒÉng:\n1. B·∫Øt ƒë·∫ßu Auto Rejoin cho Roblox Game\n2. C√†i ƒë·∫∑t User ID cho m·ªói G√≥i\n3. C√πng ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng\n4. Li√™n k·∫øt Server Ri√™ng ho·∫∑c ID Game kh√°c\n5. X√≥a User ID v√†/ho·∫∑c Li√™n k·∫øt Server Ri√™ng\n6. C√†i ƒë·∫∑t Webhook\n7. T·ª± ƒë·ªông thi·∫øt l·∫≠p User ID\n8. Danh s√°ch\n9. Tho√°t\nNh·∫≠p l·ª±a ch·ªçn: " + Style.RESET_ALL)
        if setup_type == "1":
            if webhook_url and device_name and interval:
                webhook_thread = threading.Thread(target=send_webhook)
                webhook_thread.start()
            server_links = load_server_links()
            accounts = load_accounts()
            if not accounts:
                print(Fore.RED + "Kh√¥ng t√¨m th·∫•y User ID, vui l√≤ng th·ª≠ l·∫°i sau." + Style.RESET_ALL)
                continue
            elif not server_links:
                print(Fore.RED + "Kh√¥ng t√¨m th·∫•y ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng, vui l√≤ng th·ª≠ l·∫°i sau." + Style.RESET_ALL)
                continue
            force_rejoin_interval = int(input(Fore.MAGENTA + "Nh·∫≠p th·ªùi gian b·∫Øt bu·ªôc kh·ªüi ƒë·ªông l·∫°i Roblox game (t√≠nh b·∫±ng ph√∫t): " + Style.RESET_ALL)) * 60
            print(Fore.YELLOW + "ƒêang t·∫Øt c√°c tr√≤ ch∆°i Roblox..." + Style.RESET_ALL)
            kill_roblox_processes()
            print(Fore.YELLOW + "Ch·ªù 5 gi√¢y ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i Roblox..." + Style.RESET_ALL)
            time.sleep(5)
            num_packages = len(server_links)
            for package_name, server_link in server_links:
                launch_roblox(package_name, server_link, num_packages)
            start_time = time.time()
            while True:
                for package_name, user_id in accounts:
                    if not user_id.isdigit():
                        print(Fore.GREEN + f"ƒêang l·∫•y User ID cho t√™n ng∆∞·ªùi d√πng: {user_id}..." + Style.RESET_ALL)
                        user_id = asyncio.run(get_user_id(user_id))
                        if user_id is None:
                            print(Fore.RED + "L·ªói khi l·∫•y User ID, vui l√≤ng th·ª≠ l·∫°i sau." + Style.RESET_ALL)
                            user_id = input(Fore.MAGENTA + "Nh·∫≠p User ID c·ªßa b·∫°n: " + Style.RESET_ALL)
                    username = get_username(user_id) or user_id
                    presence_type = check_user_online(user_id)
                    if presence_type == 2:
                        print(Fore.GREEN + f"{username} ({user_id}) v·∫´n ƒëang ch∆°i trong game." + Style.RESET_ALL)
                    else:
                        print(Fore.RED + f"{username} ({user_id}) ƒë√£ offline ho·∫∑c ·ªü tr·∫°ng th√°i kh√°c. Ki·ªÉm tra l·∫°i..." + Style.RESET_ALL)
                        max_retries = 5
                        retry_interval = 5
                        for attempt in range(max_retries):
                            presence_type = check_user_online(user_id)
                            if presence_type == 2:
                                print(Fore.GREEN + f"{username} ({user_id}) v·∫´n ƒëang ch∆°i trong game." + Style.RESET_ALL)
                                break
                            else:
                                print(Fore.RED + f"Th·ª≠ l·∫°i {attempt + 1}/{max_retries}: {username} ({user_id}) v·∫´n offline. Ch·ªù {retry_interval} gi√¢y ƒë·ªÉ th·ª≠ l·∫°i..." + Style.RESET_ALL)
                                time.sleep(retry_interval)
                        if presence_type != 2:
                            print(Fore.RED + f"{username} ({user_id}) ƒë√£ offline. ƒêang rejoin..." + Style.RESET_ALL)
                            kill_roblox_process(package_name)
                            launch_roblox(package_name, server_link, num_packages)
                    time.sleep(5)
                time.sleep(60)
                if time.time() - start_time >= force_rejoin_interval:
                    print("B·∫Øt bu·ªôc tho√°t ti·∫øn tr√¨nh Roblox do qu√° th·ªùi gian.")
                    kill_roblox_processes()
                    start_time = time.time()
                    print(Fore.YELLOW + "Ch·ªù 5 gi√¢y ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i Roblox..." + Style.RESET_ALL)
                    time.sleep(5)
                    for package_name, server_link in server_links:
                        launch_roblox(package_name, server_link, num_packages)
                previous_status = print_status_table(bypass_status, accounts, previous_status)
        elif setup_type == "2":
            accounts = []
            packages = get_roblox_packages()
            for package_name in packages:
                user_input = input(Fore.MAGENTA + f"Nh·∫≠p ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng cho {package_name}: " + Style.RESET_ALL)
                user_id = None
                if user_input.isdigit():
                    user_id = user_input
                else:
                    print(Fore.GREEN + f"ƒêang l·∫•y User ID cho t√™n ng∆∞·ªùi d√πng: {user_input}..." + Style.RESET_ALL)
                    user_id = asyncio.run(get_user_id(user_input))
                    if user_id is None:
                        print(Fore.RED + "Kh√¥ng l·∫•y ƒë∆∞·ª£c User ID. Vui l√≤ng nh·∫≠p User ID th·ªß c√¥ng." + Style.RESET_ALL)
                        user_id = input(Fore.MAGENTA + "Nh·∫≠p User ID c·ªßa b·∫°n: " + Style.RESET_ALL)
                accounts.append((package_name, user_id))
                print(Fore.GREEN + f"ƒê√£ c√†i ƒë·∫∑t {package_name} cho User ID: {user_id}" + Style.RESET_ALL)
            save_accounts(accounts)
            print(Fore.GREEN + "ƒê√£ l∆∞u User ID." + Style.RESET_ALL)
        elif setup_type == "3":
            server_link = input(Fore.MAGENTA + "Nh·∫≠p ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng c·ªßa b·∫°n: " + Style.RESET_ALL)
            formatted_link = format_server_link(server_link)
            if formatted_link:
                packages = get_roblox_packages()
                server_links = [(package_name, formatted_link) for package_name in packages]
                save_server_links(server_links)
                print(Fore.GREEN + "ƒê√£ l∆∞u ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng th√†nh c√¥ng!" + Style.RESET_ALL)
        elif setup_type == "4":
            packages = get_roblox_packages()
            server_links = []
            for package_name in packages:
                server_link = input(Fore.YELLOW + f"Nh·∫≠p ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng cho {package_name}: " + Style.RESET_ALL)
                formatted_link = format_server_link(server_link)
                if formatted_link:
                    server_links.append((package_name, formatted_link))
            save_server_links(server_links)
        elif setup_type == "5":
            clear_choice = input(Fore.GREEN + "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a User ID ho·∫∑c Li√™n k·∫øt Server Ri√™ng?\n1. X√≥a User ID\n2. X√≥a Li√™n k·∫øt Server Ri√™ng\n3. X√≥a c·∫£ User ID v√† Li√™n k·∫øt Server Ri√™ng\nNh·∫≠p l·ª±a ch·ªçn: " + Style.RESET_ALL)
            if clear_choice == "1":
                os.remove(ACCOUNTS_FILE)
                print(Fore.GREEN + "ƒê√£ x√≥a User ID." + Style.RESET_ALL)
            elif clear_choice == "2":
                os.remove(SERVER_LINKS_FILE)
                print(Fore.GREEN + "ƒê√£ x√≥a Li√™n k·∫øt Server Ri√™ng." + Style.RESET_ALL)
            elif clear_choice == "3":
                os.remove(ACCOUNTS_FILE)
                os.remove(SERVER_LINKS_FILE)
                print(Fore.GREEN + "ƒê√£ x√≥a User ID v√† Li√™n k·∫øt Server Ri√™ng." + Style.RESET_ALL)
        elif setup_type == "6":
            setup_webhook()
        elif setup_type == "7":
            print(Fore.GREEN + "T·ª± ƒë·ªông c√†i ƒë·∫∑t User ID b·∫±ng appStorage.json..." + Style.RESET_ALL)
            packages = get_roblox_packages()
            accounts = []
            for package_name in packages:
                file_path = f'/data/data/{package_name}/files/appData/LocalStorage/appStorage.json'
                user_id = find_userid_from_file(file_path)
                if user_id:
                    accounts.append((package_name, user_id))
                    print(f"T√¨m th·∫•y User ID cho {package_name}: {user_id}")
                else:
                    print(Fore.RED + f"Kh√¥ng t√¨m th·∫•y User ID cho {package_name}. Vui l√≤ng th·ª≠ l·∫°i sau." + Style.RESET_ALL)
            save_accounts(accounts)
            print(Fore.GREEN + "ƒê√£ l∆∞u User ID t·ª´ appStorage.json." + Style.RESET_ALL)
            server_link = input(Fore.YELLOW + "Nh·∫≠p ID Game ho·∫∑c Li√™n k·∫øt Server Ri√™ng: " + Style.RESET_ALL)
            formatted_link = format_server_link(server_link)
            if formatted_link:
                server_links = [(package_name, formatted_link) for package_name in packages]
                save_server_links(server_links)
                print(Fore.GREEN + "ƒê√£ l∆∞u ID Game v√† Li√™n k·∫øt Server Ri√™ng th√†nh c√¥ng!" + Style.RESET_ALL)
        elif setup_type == "8":
            accounts = load_accounts()
            server_links = load_server_links()
            print(Fore.CYAN + "Danh s√°ch T√™n ng∆∞·ªùi d√πng, User ID, T√™n g√≥i v√† Li√™n k·∫øt Server Ri√™ng:" + Style.RESET_ALL)
            for (package_name, user_id), (_, server_link) in zip(accounts, server_links):
                username = get_username(user_id) or user_id
                print(Fore.CYAN + f"T√™n g√≥i: {package_name}, T√™n ng∆∞·ªùi d√πng: {username}, User ID: {user_id}, Li√™n k·∫øt Server Ri√™ng: {server_link}" + Style.RESET_ALL)
        elif setup_type == "9":
            global stop_webhook_thread
            stop_webhook_thread = True
            break

if __name__ == "__main__":
    main()
